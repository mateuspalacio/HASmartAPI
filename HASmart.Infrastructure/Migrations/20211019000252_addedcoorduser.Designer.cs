// <auto-generated />
using System;
using HASmart.Infrastructure.EFDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HASmart.Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20211019000252_addedcoorduser")]
    partial class addedcoorduser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("HASmart.Core.Entities.Afericao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)");

                    b.Property<uint>("Diastolica")
                        .HasColumnType("int unsigned");

                    b.Property<Guid>("MedicaoId")
                        .HasColumnType("CHAR(36)");

                    b.Property<uint>("Sistolica")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("MedicaoId");

                    b.ToTable("Afericao");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Cidadao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("Cpf")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("Rg")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("medicoAtualId")
                        .HasColumnType("CHAR(36)");

                    b.HasKey("Id");

                    b.HasIndex("medicoAtualId");

                    b.ToTable("Cidadaos");
                });

            modelBuilder.Entity("HASmart.Core.Entities.DadosPessoais", b =>
                {
                    b.Property<Guid>("DadosPessoaisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)");

                    b.Property<Guid>("CidadaoId")
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Genero")
                        .HasColumnType("longtext");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.HasKey("DadosPessoaisId");

                    b.HasIndex("CidadaoId")
                        .IsUnique();

                    b.ToTable("DadosPessoais");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("CEP")
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext");

                    b.Property<string>("Complemento")
                        .HasColumnType("longtext");

                    b.Property<Guid>("DadosPessoais_Id")
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext");

                    b.Property<string>("Rua")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DadosPessoais_Id")
                        .IsUnique();

                    b.ToTable("Enderecos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Endereco");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Farmacia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("Cnpj")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("EnderecoId")
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("longtext");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("longtext");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("Farmacias");
                });

            modelBuilder.Entity("HASmart.Core.Entities.IndicadorRiscoHAS", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)");

                    b.Property<float>("Altura")
                        .HasColumnType("float");

                    b.Property<Guid>("Cidadao_Id")
                        .HasColumnType("CHAR(36)");

                    b.Property<int>("Diabetico")
                        .HasColumnType("int");

                    b.Property<int>("DoencaArterialObstrutivaPeriferica")
                        .HasColumnType("int");

                    b.Property<int>("DoencaRenalCronica")
                        .HasColumnType("int");

                    b.Property<int>("Fumante")
                        .HasColumnType("int");

                    b.Property<int>("HistoricoAvc")
                        .HasColumnType("int");

                    b.Property<int>("HistoricoInfarto")
                        .HasColumnType("int");

                    b.Property<int>("InsuficienciaCardiaca")
                        .HasColumnType("int");

                    b.Property<int>("RetinopatiaHipertensiva")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cidadao_Id")
                        .IsUnique();

                    b.ToTable("IndicadorRiscos");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Medicamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)");

                    b.Property<Guid>("MedicaoId")
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MedicaoId");

                    b.ToTable("Medicamentos");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Medicao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)");

                    b.Property<Guid>("CidadaoId")
                        .HasColumnType("CHAR(36)");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Peso")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CidadaoId");

                    b.ToTable("Medicoes");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Medico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("Crm")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("Senha")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Medicos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e5c300a-4aad-4644-98fd-b6c6439dd133"),
                            Nome = "coordhasmart",
                            Senha = "coord123"
                        });
                });

            modelBuilder.Entity("HASmart.Core.Entities.Operador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("Senha")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Operadores");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Relatorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)");

                    b.Property<Guid>("CidadaoId")
                        .HasColumnType("CHAR(36)");

                    b.Property<DateTime>("DataRelatorio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RelatorioCidadao")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CidadaoId");

                    b.ToTable("Relatorios");
                });

            modelBuilder.Entity("HASmart.Core.Entities.EnderecoFarmacia", b =>
                {
                    b.HasBaseType("HASmart.Core.Entities.Endereco");

                    b.Property<int>("Macroregiao")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("EnderecoFarmacia");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Afericao", b =>
                {
                    b.HasOne("HASmart.Core.Entities.Medicao", "Medicao")
                        .WithMany("Afericoes")
                        .HasForeignKey("MedicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicao");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Cidadao", b =>
                {
                    b.HasOne("HASmart.Core.Entities.Medico", "medicoAtual")
                        .WithMany("cidadaosAtuais")
                        .HasForeignKey("medicoAtualId");

                    b.Navigation("medicoAtual");
                });

            modelBuilder.Entity("HASmart.Core.Entities.DadosPessoais", b =>
                {
                    b.HasOne("HASmart.Core.Entities.Cidadao", "Cidadao")
                        .WithOne("DadosPessoais")
                        .HasForeignKey("HASmart.Core.Entities.DadosPessoais", "CidadaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidadao");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Endereco", b =>
                {
                    b.HasOne("HASmart.Core.Entities.DadosPessoais", "DadosPessoais")
                        .WithOne("Endereco")
                        .HasForeignKey("HASmart.Core.Entities.Endereco", "DadosPessoais_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DadosPessoais");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Farmacia", b =>
                {
                    b.HasOne("HASmart.Core.Entities.EnderecoFarmacia", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("HASmart.Core.Entities.IndicadorRiscoHAS", b =>
                {
                    b.HasOne("HASmart.Core.Entities.Cidadao", "Cidadao")
                        .WithOne("IndicadorRiscoHAS")
                        .HasForeignKey("HASmart.Core.Entities.IndicadorRiscoHAS", "Cidadao_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidadao");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Medicamento", b =>
                {
                    b.HasOne("HASmart.Core.Entities.Medicao", "Medicao")
                        .WithMany("Medicamentos")
                        .HasForeignKey("MedicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicao");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Medicao", b =>
                {
                    b.HasOne("HASmart.Core.Entities.Cidadao", "Cidadao")
                        .WithMany("Medicoes")
                        .HasForeignKey("CidadaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidadao");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Relatorio", b =>
                {
                    b.HasOne("HASmart.Core.Entities.Cidadao", "Cidadao")
                        .WithMany("Relatorios")
                        .HasForeignKey("CidadaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidadao");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Cidadao", b =>
                {
                    b.Navigation("DadosPessoais");

                    b.Navigation("IndicadorRiscoHAS");

                    b.Navigation("Medicoes");

                    b.Navigation("Relatorios");
                });

            modelBuilder.Entity("HASmart.Core.Entities.DadosPessoais", b =>
                {
                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Medicao", b =>
                {
                    b.Navigation("Afericoes");

                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("HASmart.Core.Entities.Medico", b =>
                {
                    b.Navigation("cidadaosAtuais");
                });
#pragma warning restore 612, 618
        }
    }
}
